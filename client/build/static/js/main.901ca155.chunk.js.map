{"version":3,"sources":["utils/auth.js","utils/localStorage.js","utils/mutations.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","LOGIN_USER","gql","CREATE_USER","SAVE_BOOK","DELETE_BOOK","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useMutation","saveBook","error","useEffect","bookIdArr","length","handleFormSubmit","event","a","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","handleSaveBook","bookToSave","find","Auth","loggedIn","variables","input","data","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","GET_USER","SavedBooks","useQuery","loading","deleteBook","userData","getUser","handleDeleteBook","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","createUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","loginUser","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","Collapse","Nav","logout","Modal","onHide","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","client","ApolloClient","request","operation","setContext","headers","authorization","uri","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.901ca155.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\r\nimport decode from 'jwt-decode';\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","export const getSavedBookIds = () => {\r\n  const savedBookIds = localStorage.getItem('saved_books')\r\n    ? JSON.parse(localStorage.getItem('saved_books'))\r\n    : [];\r\n\r\n  return savedBookIds;\r\n};\r\n\r\nexport const saveBookIds = (bookIdArr) => {\r\n  if (bookIdArr.length) {\r\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\r\n  } else {\r\n    localStorage.removeItem('saved_books');\r\n  }\r\n};\r\n\r\nexport const removeBookId = (bookId) => {\r\n  const savedBookIds = localStorage.getItem('saved_books')\r\n    ? JSON.parse(localStorage.getItem('saved_books'))\r\n    : null;\r\n\r\n  if (!savedBookIds) {\r\n    return false;\r\n  }\r\n\r\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\r\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\r\n\r\n  return true;\r\n};\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const LOGIN_USER = gql`\r\n  mutation loginUser($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CREATE_USER = gql`\r\n  mutation createUser($username: String!, $password: String!, $email: String!) {\r\n    createUser(username: $username, password: $password, email: $email) {\r\n      user {\r\n        _id\r\n        username\r\n        email\r\n        bookCount\r\n        savedBooks {\r\n          authors\r\n          description\r\n          bookId\r\n          title\r\n          image\r\n          link\r\n        }\r\n      }\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SAVE_BOOK = gql`\r\n  mutation saveBook($input: BookInput!) {\r\n    saveBook(input: $input) {\r\n      _id\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        bookId\r\n        authors\r\n        image\r\n        link\r\n        title\r\n        description\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const DELETE_BOOK = gql`\r\n  mutation deleteBook($bookId: ID!) {\r\n    deleteBook(bookId: $bookId) {\r\n      _id\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        bookId\r\n        authors\r\n        description\r\n        title\r\n        image\r\n        link\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Jumbotron,\r\n  Container,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  Card,\r\n  CardColumns,\r\n} from \"react-bootstrap\";\r\n\r\nimport Auth from \"../utils/auth\";\r\nimport { saveBook, searchGoogleBooks } from \"../utils/API\";\r\nimport { saveBookIds, getSavedBookIds } from \"../utils/localStorage\";\r\n\r\nimport { SAVE_BOOK } from \"../utils/mutations\";\r\nimport { useMutation } from '@apollo/client';\r\n\r\nconst SearchBooks = () => {\r\n  // create state for holding returned google api data\r\n  const [searchedBooks, setSearchedBooks] = useState([]);\r\n  // create state for holding our search field data\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n\r\n  // create state to hold saved bookId values\r\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\r\n\r\n  const [saveBook, { error }] = useMutation(SAVE_BOOK);\r\n\r\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\r\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\r\n  useEffect(() => {\r\n    return () => saveBookIds(savedBookIds);\r\n  });\r\n\r\n  // create method to search for books and set state on form submit\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!searchInput) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await searchGoogleBooks(searchInput);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"something went wrong!\");\r\n      }\r\n\r\n      const { items } = await response.json();\r\n\r\n      const bookData = items.map((book) => ({\r\n        bookId: book.id,\r\n        authors: book.volumeInfo.authors || [\"No author to display\"],\r\n        title: book.volumeInfo.title,\r\n        description: book.volumeInfo.description,\r\n        image: book.volumeInfo.imageLinks?.thumbnail || \"\",\r\n      }));\r\n\r\n      setSearchedBooks(bookData);\r\n      setSearchInput(\"\");\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // create function to handle saving a book to our database\r\n  const handleSaveBook = async (bookId) => {\r\n    // find the book in `searchedBooks` state by the matching id\r\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\r\n\r\n \r\n\r\n    // get token\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      // const response = await saveBook(bookToSave, token);\r\n      const {data} = await saveBook({\r\n        variables: { input: bookToSave }\r\n      });\r\n\r\n      // if book successfully saves to user's account, save book id to state\r\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className=\"text-light bg-dark\">\r\n        <Container>\r\n          <h1>Search for Books!</h1>\r\n          <Form onSubmit={handleFormSubmit}>\r\n            <Form.Row>\r\n              <Col xs={12} md={8}>\r\n                <Form.Control\r\n                  name=\"searchInput\"\r\n                  value={searchInput}\r\n                  onChange={(e) => setSearchInput(e.target.value)}\r\n                  type=\"text\"\r\n                  size=\"lg\"\r\n                  placeholder=\"Search for a book\"\r\n                />\r\n              </Col>\r\n              <Col xs={12} md={4}>\r\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\r\n                  Submit Search\r\n                </Button>\r\n              </Col>\r\n            </Form.Row>\r\n          </Form>\r\n        </Container>\r\n      </Jumbotron>\r\n\r\n      <Container>\r\n        <h2>\r\n          {searchedBooks.length\r\n            ? `Viewing ${searchedBooks.length} results:`\r\n            : \"Search for a book to begin\"}\r\n        </h2>\r\n        <CardColumns>\r\n          {searchedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border=\"dark\">\r\n                {book.image ? (\r\n                  <Card.Img\r\n                    src={book.image}\r\n                    alt={`The cover for ${book.title}`}\r\n                    variant=\"top\"\r\n                  />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className=\"small\">Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  {Auth.loggedIn() && (\r\n                    <Button\r\n                      disabled={savedBookIds?.some(\r\n                        (savedBookId) => savedBookId === book.bookId\r\n                      )}\r\n                      className=\"btn-block btn-info\"\r\n                      onClick={() => handleSaveBook(book.bookId)}\r\n                    >\r\n                      {savedBookIds?.some(\r\n                        (savedBookId) => savedBookId === book.bookId\r\n                      )\r\n                        ? \"This book has already been saved!\"\r\n                        : \"Save this Book!\"}\r\n                    </Button>\r\n                  )}\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBooks;\r\n","// route to get logged in user's info (needs the token)\r\nexport const getMe = (token) => {\r\n  return fetch('/api/users/me', {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n};\r\n\r\nexport const createUser = (userData) => {\r\n  return fetch('/api/users', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(userData),\r\n  });\r\n};\r\n\r\nexport const loginUser = (userData) => {\r\n  return fetch('/api/users/login', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(userData),\r\n  });\r\n};\r\n\r\n// save book data for a logged in user\r\nexport const saveBook = (bookData, token) => {\r\n  return fetch('/api/users', {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify(bookData),\r\n  });\r\n};\r\n\r\n// remove saved book data for a logged in user\r\nexport const deleteBook = (bookId, token) => {\r\n  return fetch(`/api/users/books/${bookId}`, {\r\n    method: 'DELETE',\r\n    headers: {\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n};\r\n\r\n// make a search to google books api\r\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\r\nexport const searchGoogleBooks = (query) => {\r\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\r\n};\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const GET_USER = gql`\r\n{\r\n    getUser {\r\n      _id\r\n      username\r\n      email\r\n      bookCount\r\n      savedBooks {\r\n        # _id\r\n        bookId\r\n        authors\r\n        image\r\n        link\r\n        title\r\n        description\r\n      }\r\n    }\r\n  }\r\n`;","import React, { useState, useEffect } from 'react';\r\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\r\n\r\n// import { getMe, deleteBook } from '../utils/API';\r\nimport Auth from '../utils/auth';\r\nimport { removeBookId } from '../utils/localStorage';\r\n\r\nimport {useMutation, useQuery} from '@apollo/react-hooks';\r\nimport { GET_USER } from '../utils/queries';\r\nimport { DELETE_BOOK } from '../utils/mutations';\r\n\r\n\r\nconst SavedBooks = () => {\r\n  const { loading, data} = useQuery(GET_USER);\r\n  const [deleteBook, {error}] = useMutation(DELETE_BOOK);\r\n  \r\n  const userData = data?.getUser || [];\r\n  const handleDeleteBook = async (bookId) => {\r\n\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const {data} = await deleteBook({\r\n        variables: { bookId }\r\n      });\r\n      removeBookId(bookId);\r\n    } catch (err) {\r\n      \r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n\r\n  if (loading) {\r\n    return <h2>LOADING...</h2>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className='text-light bg-dark'>\r\n        <Container>\r\n          <h1>Viewing saved books!</h1>\r\n        </Container>\r\n      </Jumbotron>\r\n      <Container>\r\n        <h2>\r\n          {userData.savedBooks.length\r\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\r\n            : 'You have no saved books!'}\r\n        </h2>\r\n        <CardColumns>\r\n          {userData.savedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border='dark'>\r\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className='small'>Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\r\n                    Delete this Book!\r\n                  </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SavedBooks;\r\n","import React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport { useMutation } from '@apollo/react-hooks';\r\n\r\n// import { createUser } from '../utils/API';\r\nimport Auth from '../utils/auth';\r\nimport { CREATE_USER } from '../utils/mutations';\r\n\r\nconst SignupForm = () => {\r\n  // set initial form state\r\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\r\n  // set state for form validation\r\n  const [validated] = useState(false);\r\n  // set state for alert\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  const[createUser] = useMutation(CREATE_USER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      // execute addUser mutation and pass in variable data from form\r\n      const { data } = await createUser({\r\n        variables: { ...userFormData}\r\n      });\r\n\r\n      Auth.login(data.createUser.token)\r\n\r\n    } catch (e) {\r\n      console.error(e);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* This is needed for the validation functionality above */}\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        {/* show alert if server response is bad */}\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your signup!\r\n        </Alert>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='username'>Username</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your username'\r\n            name='username'\r\n            onChange={handleInputChange}\r\n            value={userFormData.username}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n          <Form.Control\r\n            type='email'\r\n            placeholder='Your email address'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupForm;\r\n","// see SignupForm.js for comments\r\nimport React, { useState } from \"react\";\r\nimport { Form, Button, Alert } from \"react-bootstrap\";\r\n\r\n// import { loginUser } from '../utils/API';\r\nimport Auth from \"../utils/auth\";\r\n\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport { LOGIN_USER } from \"../utils/mutations\";\r\n\r\nconst LoginForm = () => {\r\n  const [userFormData, setUserFormData] = useState({ email: \"\", password: \"\" });\r\n  const [validated] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  const [loginUser, { error }] = useMutation(LOGIN_USER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      const { data } = await loginUser({\r\n        variables: { ...userFormData },\r\n      });\r\n      Auth.login(data.login.token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      // setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        <Alert\r\n          dismissible\r\n          onClose={() => setShowAlert(false)}\r\n          show={showAlert}\r\n          variant=\"danger\"\r\n        >\r\n          Something went wrong with your login credentials!\r\n        </Alert>\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Your email\"\r\n            name=\"email\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Email is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            placeholder=\"Your password\"\r\n            name=\"password\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Password is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.email && userFormData.password)}\r\n          type=\"submit\"\r\n          variant=\"success\"\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\r\nimport SignUpForm from './SignupForm';\r\nimport LoginForm from './LoginForm';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst AppNavbar = () => {\r\n  // set modal display state\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Navbar bg='dark' variant='dark' expand='lg'>\r\n        <Container fluid>\r\n          <Navbar.Brand as={Link} to='/'>\r\n            Google Books Search\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls='navbar' />\r\n          <Navbar.Collapse id='navbar'>\r\n            <Nav className='ml-auto'>\r\n              <Nav.Link as={Link} to='/'>\r\n                Search For Books\r\n              </Nav.Link>\r\n              {/* if user is logged in show saved books and logout */}\r\n              {Auth.loggedIn() ? (\r\n                <>\r\n                  <Nav.Link as={Link} to='/saved'>\r\n                    See Your Books\r\n                  </Nav.Link>\r\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\r\n                </>\r\n              ) : (\r\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n      {/* set modal data up */}\r\n      <Modal\r\n        size='lg'\r\n        show={showModal}\r\n        onHide={() => setShowModal(false)}\r\n        aria-labelledby='signup-modal'>\r\n        {/* tab container to do either signup or login component */}\r\n        <Tab.Container defaultActiveKey='login'>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id='signup-modal'>\r\n              <Nav variant='pills'>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\r\n                </Nav.Item>\r\n              </Nav>\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Tab.Content>\r\n              <Tab.Pane eventKey='login'>\r\n                <LoginForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n              <Tab.Pane eventKey='signup'>\r\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n            </Tab.Content>\r\n          </Modal.Body>\r\n        </Tab.Container>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppNavbar;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport SearchBooks from './pages/SearchBooks';\r\nimport SavedBooks from './pages/SavedBooks';\r\nimport Navbar from './components/Navbar';\r\n// add these two library import statements\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport ApolloClient from 'apollo-boost';\r\n\r\nconst client = new ApolloClient({\r\n  // uri: 'http://localhost:3001/graphql'\r\n  request: operation => {\r\n    const token = localStorage.getItem('id_token');\r\n\r\n    operation.setContext({\r\n      headers: {\r\n        authorization: token ? `Bearer ${token}` : ''\r\n      }\r\n    })\r\n  },\r\n  uri: '/graphql'\r\n});\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n        <Router>\r\n          <>\r\n          <Navbar />\r\n          <Switch>\r\n            <Route exact path='/' component={SearchBooks} />\r\n            <Route exact path='/saved' component={SavedBooks} />\r\n            <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\r\n          </Switch>\r\n          </>\r\n        </Router> \r\n    </ApolloProvider>\r\n\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}